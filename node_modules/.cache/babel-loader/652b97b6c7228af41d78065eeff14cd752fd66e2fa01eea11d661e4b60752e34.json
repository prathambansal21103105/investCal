{"ast":null,"code":"var _jsxFileName = \"/Users/prathambansal/Desktop/investCal/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport InvestForm from './Components/InvestForm';\nimport Header from './Components/Header';\nimport ResultTable from './Components/ResultTable';\nimport logo from './assets/investment-calculator-logo.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst data1 = [];\nfunction App() {\n  _s();\n  const [yearlyData, setYearlyData] = useState(data1);\n  const [showTable, setShowTable] = useState(false);\n  const calculateHandler = userInput => {\n    setShowTable(true);\n    userInput.preventDefault();\n    console.log(\"Submitted\");\n    console.log(userInput);\n    console.log(yearlyData.length);\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    // const yearlyData = []; // per-year results\n    console.log(typeof Number(userInput.target[0].value));\n    let currentSavings = Number(userInput.target[0].value); // feel free to change the shape of this input object!\n    const yearlyContribution = Number(userInput.target[1].value); // as mentioned: feel free to change the shape...\n    const expectedReturn = Number(userInput.target[2].value) / 100;\n    const duration = Number(userInput.target[3].value);\n    console.log(currentSavings, yearlyContribution, expectedReturn, duration);\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      const val = {\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      };\n      setYearlyData(prev => {\n        return [val];\n      });\n    }\n    if (showTable && yearlyData.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"No data available!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 14\n      }, this);\n    }\n\n    // do something with yearlyData ...\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      logo: logo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InvestForm, {\n      submitHandler: calculateHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), showTable && /*#__PURE__*/_jsxDEV(ResultTable, {\n      data: yearlyData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"vJhJzRGziKkfAu3b4pHQ9pX8Owg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","InvestForm","Header","ResultTable","logo","jsxDEV","_jsxDEV","data1","App","_s","yearlyData","setYearlyData","showTable","setShowTable","calculateHandler","userInput","preventDefault","console","log","length","Number","target","value","currentSavings","yearlyContribution","expectedReturn","duration","i","yearlyInterest","val","year","savingsEndOfYear","prev","children","fileName","_jsxFileName","lineNumber","columnNumber","submitHandler","data","_c","$RefreshReg$"],"sources":["/Users/prathambansal/Desktop/investCal/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport InvestForm from './Components/InvestForm';\nimport Header from './Components/Header';\nimport ResultTable from './Components/ResultTable';\nimport logo from './assets/investment-calculator-logo.png';\nconst data1=[];\nfunction App() {\n  const[yearlyData,setYearlyData]=useState(data1);\n  const[showTable,setShowTable]=useState(false);\n  \n  const calculateHandler = (userInput) => {\n    setShowTable(true);\n    userInput.preventDefault();\n    console.log(\"Submitted\");\n    console.log(userInput);\n    console.log(yearlyData.length);\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    // const yearlyData = []; // per-year results\n    console.log(typeof (Number(userInput.target[0].value)));\n    let currentSavings = Number(userInput.target[0].value); // feel free to change the shape of this input object!\n    const yearlyContribution = Number(userInput.target[1].value) // as mentioned: feel free to change the shape...\n    const expectedReturn = Number(userInput.target[2].value) / 100;\n    const duration = Number(userInput.target[3].value);\n    console.log(currentSavings,yearlyContribution,expectedReturn,duration);\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      const val={\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution,\n      };\n      setYearlyData((prev)=>{\n        return [val]; \n      });\n    }\n    if(showTable && yearlyData.length===0){\n      return <h1>No data available!</h1>\n    }\n    \n    // do something with yearlyData ...\n  };\n\n  return (\n    <div>\n      <Header logo={logo}/>\n      <InvestForm submitHandler={calculateHandler}/>\n      {showTable && <ResultTable data={yearlyData}/>}\n      {/* Show fallback text if no data is available */}\n\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}